{"version":3,"sources":["Joke.js","Jokes.js","App.js","index.js"],"names":["StyledBody","styled","p","Joke","joke","defaultProps","React","memo","StyledList","li","Jokes","useState","jokes","setJokes","fetchJokes","a","fetch","headers","Accept","res","json","data","results","useEffect","map","id","App","className","rootElement","document","getElementById","ReactDOM","render"],"mappings":"sNAIMA,EAAaC,IAAOC,EAAV,kDAIVC,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OAAO,cAACJ,EAAD,UAAaI,KAGtBD,EAAKE,aAAe,CAClBD,KAAM,IAQOE,I,EAAAA,MAAMC,KAAKJ,GCfpBK,EAAaP,IAAOQ,GAAV,kEAIVC,EAAQ,WAEZ,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAU,uCAAG,8BAAAC,EAAA,4DACL,oCADK,SAIDC,MAHJ,oCAGe,CACzBC,QAAS,CACPC,OAAQ,sBANK,cAIbC,EAJa,gBAUAA,EAAIC,OAVJ,OAUbC,EAVa,OAajBR,EAASQ,EAAKC,SAbG,2CAAH,qDAkBhB,OAHAC,qBAAU,WACRT,MACC,IAED,qCACE,uCACA,oCACGF,QADH,IACGA,OADH,EACGA,EAAOY,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,GAAIrB,EAAW,EAAXA,KAIjB,OACE,cAACI,EAAD,UACE,cAAC,EAAD,CAAMJ,KAAMA,KADGqB,YAWdnB,MAAMC,KAAKG,G,MCjDX,SAASgB,IACtB,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,MCDN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACN,EAAD,MAEFE,K","file":"static/js/main.266ed3be.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst StyledBody = styled.p`\n  margin: 2px 0 5px;\n`;\n\nconst Joke = ({ joke }) => {\n  return <StyledBody>{joke}</StyledBody>;\n};\n// Swetting default props to empty string in case no string returned\nJoke.defaultProps = {\n  joke: \"\"\n};\n// setting proptypes to run typechecking on the props\nJoke.propTypes = {\n  joke: PropTypes.string\n};\n\n// Memoizing component to avoid unnecessary rerenders\nexport default React.memo(Joke);\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nimport Joke from \"./Joke\";\n\n// Styled components for dynamic styling and performance support\nconst StyledList = styled.li`\n  padding: 2px;\n  text-align: left;\n`;\nconst Jokes = () => {\n  // set intial state to empty array\n  const [jokes, setJokes] = useState([]);\n\n  const fetchJokes = async () => {\n    const url = \"https://icanhazdadjoke.com/search\";\n\n    // fetching data, using fetch, can use axios as well\n    let res = await fetch(url, {\n      headers: {\n        Accept: \"application/json\"\n      }\n    });\n    // data returned from promise has to be converted to json\n    let data = await res.json();\n\n    // updating the state\n    setJokes(data.results);\n  };\n  useEffect(() => {\n    fetchJokes();\n  }, []); // fetching only once\n  return (\n    <>\n      <h2>Jokes</h2>\n      <ul>\n        {jokes?.map(({ id, joke }) => {\n          // destructing\n          // can create a small function here to render list,\n          // but i like to keep the code clean for easier maintainance and debugging\n          return (\n            <StyledList key={id}>\n              <Joke joke={joke} />\n            </StyledList>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\n// memoizing components for performance\nexport default React.memo(Jokes);\n","import Jokes from \"./Jokes\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Jokes />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}